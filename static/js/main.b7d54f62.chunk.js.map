{"version":3,"sources":["model/GameStat.js","service/GameStatService.js","components/DrawCPMChart/index.js","components/StatTable/index.js","components/Dashboard/index.js","App.js","serviceWorker.js","index.js","components/Dashboard/dashboard.module.css"],"names":["GameStat","timestamp","game","revenue","impressions","Object","classCallCheck","this","_timestamp","Date","getTime","_momentTime","moment","createClass","key","value","data","map","_ref","GameStatService","fetch","BASE_ENDPOINT","then","res","json","fromArray","DrawCPMChart","props","stats","useMemo","labels","stat","datasets","label","fill","borderColor","getECPM","length","react_default","a","createElement","style","marginLeft","es","options","maintainAspectRatio","legend","height","columns","id","Header","accessor","d","format","sortMethod","b","StatTable","react_table_es","noDataText","minRows","defaultPageSize","pageSizeOptions","defaultSorted","desc","Dashboard","_useState","useState","subtract","_useState2","slicedToArray","selectedStartDate","setSelectedStartDate","_useState3","_useState4","selectedEndDate","setSelectedEndDate","_useState5","_useState6","focusedDateRange","setFocusedDateRange","_useState7","_useState8","setStats","_useState9","_useState10","isLoading","setIsLoading","_useState11","_useState12","filteredStats","setFilteredStats","useEffect","slowNetwork","setTimeout","toast","info","concat","catch","err","console","log","errorMsg","message","error","finally","clearTimeout","_stats","filter","isBetween","className","react_spinners","size","Container","styles","dashbaord","header","FormGroup","Label","react_dates","displayFormat","numberOfMonths","startDate","isOutsideRange","isDayBlocked","date","valueOf","now","startDateId","endDate","endDateId","onDatesChange","focusedInput","onFocusChange","section","DrawCPMChart_DrawCPMChart","components_StatTable","App","Fragment","components_Dashboard","react_toastify","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b7d54f62.chunk.js","sourcesContent":["import moment from 'moment';\n\nexport class GameStat {\n  constructor(timestamp, game, revenue, impressions) {\n    this.timestamp = timestamp;\n    this.game = game;\n    this.revenue = revenue;\n    this.impressions = impressions;\n    this._timestamp = new Date(this.timestamp).getTime();\n    this._momentTime = new moment(this._timestamp);\n  }\n\n  getECPM() {\n    return (this.revenue * 1000.0) / this.impressions;\n  }\n\n  /**\n   * @param {any[]} data\n   */\n  static fromArray(data) {\n    return data.map(\n      ({ timestamp, game, revenue, impressions }) =>\n        new GameStat(timestamp, game, revenue, impressions)\n    );\n  }\n}\n","import { GameStat } from '../model/GameStat';\n\nconst BASE_ENDPOINT = `https://www.mocky.io/v2`;\n\nexport const GameStatService = {\n  getStats() {\n    return fetch(BASE_ENDPOINT + '/5cd04a20320000442200fc10')\n      .then(res => res.json())\n      .then(data => GameStat.fromArray(data));\n  }\n};\n","//@ts-check\nimport React, { useMemo } from 'react';\nimport { Line } from 'react-chartjs-2';\n\n/**\n *\n * @param { {stats: import('../../model/GameStat').GameStat[]} } props\n */\nexport const DrawCPMChart = props => {\n  const { stats } = props;\n\n  const data = useMemo(() => {\n    if (!stats) return null;\n\n    const labels = stats.map(stat => stat.timestamp);\n    const data = stats.map(stat => stat.getECPM());\n\n    /**\n     * @type {import('react-chartjs-2').ChartData<Chart.ChartData>}\n     */\n    const chartData = {\n      labels,\n      datasets: [\n        {\n          label: 'Game Stats',\n          fill: false,\n          borderColor: 'rgba(75,192,192,1)',\n          data\n        }\n      ]\n    };\n\n    return chartData;\n  }, [stats]);\n\n  if (!data) return null;\n  if (!stats.length) return 'No matched data';\n\n  return (\n    <div style={{ marginLeft: '-20px' }}>\n      <Line\n        options={{\n          maintainAspectRatio: false,\n          legend: null\n        }}\n        height={350}\n        data={data}\n      />\n    </div>\n  );\n};\n","//@ts-check\nimport React from 'react';\nimport ReactTable from 'react-table';\n\nconst columns = [\n  {\n    id: 'timestamp',\n    Header: 'Timestamp',\n    accessor: d => d._momentTime.format('YYYY-MM-DD'),\n    sortMethod: (a, b) => {\n      return new Date(a).getTime() > new Date(b).getTime() ? 1 : -1;\n    }\n  },\n  {\n    Header: 'Game',\n    accessor: 'game'\n  },\n  {\n    Header: 'Revenue',\n    accessor: 'revenue'\n  },\n  {\n    Header: 'Impressions',\n    accessor: 'impressions'\n  },\n  {\n    id: 'eCPM',\n    Header: 'eCPM',\n    accessor: d => d.getECPM()\n  }\n];\n\n/**\n *\n * @param { {stats: import('../../model/GameStat').GameStat[]} } props\n */\nconst StatTable = props => {\n  return (\n    <ReactTable\n      noDataText={'No Matched Data'}\n      minRows={1}\n      defaultPageSize={5}\n      pageSizeOptions={[5, 10]}\n      data={props.stats || []}\n      columns={columns}\n      defaultSorted={[{ id: 'timestamp', desc: false }]}\n    />\n  );\n};\n\nexport default StatTable;\n","import React, { useState, useEffect } from 'react';\nimport { DateRangePicker } from 'react-dates';\nimport moment from 'moment';\nimport { Container, FormGroup, Label } from 'reactstrap';\n\nimport styles from './dashboard.module.css';\nimport { GameStatService } from '../../service/GameStatService';\nimport { DrawCPMChart } from '../DrawCPMChart';\nimport StatTable from '../StatTable';\nimport { ClipLoader } from 'react-spinners';\nimport { toast } from 'react-toastify';\n\nconst Dashboard = () => {\n  const [selectedStartDate, setSelectedStartDate] = useState(\n    new moment().subtract(365, 'days')\n  );\n  const [selectedEndDate, setSelectedEndDate] = useState(new moment());\n  const [focusedDateRange, setFocusedDateRange] = useState(null);\n\n  const [stats, setStats] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [filteredStats, setFilteredStats] = useState(null);\n\n  useEffect(() => {\n    const timeoutInMs = 200;\n    const slowNetwork = setTimeout(() => {\n      toast.info(`Slow! request is not completed within ${timeoutInMs}ms`);\n    }, timeoutInMs);\n\n    setIsLoading(true);\n\n    GameStatService.getStats()\n      .then(stats => {\n        setStats(stats);\n      })\n      .catch(err => {\n        console.log(err);\n        const errorMsg = err.message;\n        toast.error(`${errorMsg || 'Failed to load data'}`);\n      })\n      .finally(() => {\n        setIsLoading(false);\n        clearTimeout(slowNetwork);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (!stats) {\n      return;\n    }\n\n    const _stats = stats.filter(stat =>\n      stat._momentTime.isBetween(selectedStartDate, selectedEndDate)\n    );\n\n    setFilteredStats(_stats || []);\n  }, [stats, selectedStartDate, selectedEndDate]);\n\n  if (isLoading) {\n    return (\n      <div className=\"fullScreenSpinner\">\n        <ClipLoader size={150} />\n      </div>\n    );\n  }\n\n  return (\n    <Container className={styles.dashbaord}>\n      <h2 className={styles.header}>Game Stats</h2>\n      <div>\n        <FormGroup>\n          <Label>Select Date Range</Label>\n          <div>\n            <DateRangePicker\n              displayFormat={'DD/MM/YYYY'}\n              numberOfMonths={1}\n              startDate={selectedStartDate}\n              isOutsideRange={() => false}\n              isDayBlocked={date => date.valueOf() > Date.now()}\n              startDateId=\"game_date_range_start_date\"\n              endDate={selectedEndDate}\n              endDateId=\"game_date_range_end_date\"\n              onDatesChange={({ startDate, endDate }) => {\n                setSelectedStartDate(startDate);\n                setSelectedEndDate(endDate);\n              }}\n              focusedInput={focusedDateRange}\n              onFocusChange={focusedInput => setFocusedDateRange(focusedInput)}\n            />\n          </div>\n        </FormGroup>\n      </div>\n      <div className={styles.section}>\n        <h4>Stats Charts</h4>\n        <DrawCPMChart stats={filteredStats} />\n      </div>\n      <div className={styles.section}>\n        <h4>Stats Table</h4>\n        <StatTable stats={filteredStats} />\n      </div>\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport { ToastContainer } from 'react-toastify';\n\nfunction App() {\n  return (\n    <>\n      <Dashboard />\n      <ToastContainer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-table/react-table.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashbaord\":\"dashboard_dashbaord__18YOF\",\"header\":\"dashboard_header__1TAeA\",\"section\":\"dashboard_section__dGash\"};"],"sourceRoot":""}